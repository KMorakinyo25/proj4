import requests
import sqlite3
import os
from email.message import EmailMessage
import ssl
import smtplib

def select_doctor():
    while True:
        selected_doctor = input('Enter the name and specialty of the doctor: ')
        if selected_doctor in doctors:
            return selected_doctor
        else:
            print("Invalid doctor name/specialty. Please try again.")

print('Welcome to Doctors Appointments Made Easy!')

doctors ={
 'Christina Yang - Cardio' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00'],
 'Alex Karev - Pediatrics' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00'],
 'Izzie Stevens - Oncology' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00'],
 'George OMalley - Orthopaedics' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00'],   
 'Meredith Grey - General Surgery' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00'], 
'Calliope Tores - Orthopaedics' : ['06/30/2023 08:00', '06/30/2023 09:00', '06/30/2023 10:00', '06/30/2023 11:00',
             '06/30/2023 13:00', '06/30/2023 14:00', '06/30/2023 15:00', '06/30/2023 16:00',
             '07/03/2023 08:00', '07/03/2023 09:00', '07/03/2023 10:00', '07/03/2023 11:00',
             '07/03/2023 13:00', '07/03/2023 14:00', '07/03/2023 15:00', '07/03/2023 16:00',
             '07/05/2023 08:00', '07/05/2023 09:00', '07/05/2023 10:00', '07/05/2023 11:00',
             '07/05/2023 13:00', '07/05/2023 14:00', '07/05/2023 15:00', '07/05/2023 16:00',
             '07/06/2023 08:00', '07/06/2023 09:00', '07/06/2023 10:00', '07/06/2023 11:00',
             '07/06/2023 13:00', '07/06/2023 14:00', '07/06/2023 15:00', '07/06/2023 16:00',
             '07/07/2023 08:00', '07/07/2023 09:00', '07/07/2023 10:00', '07/07/2023 11:00',
             '07/07/2023 13:00', '07/07/2023 14:00', '07/07/2023 15:00', '07/07/2023 16:00',
             '07/08/2023 08:00', '07/08/2023 09:00', '07/08/2023 10:00', '07/08/2023 11:00',
             '07/08/2023 13:00', '07/08/2023 14:00', '07/08/2023 15:00', '07/08/2023 16:00',
             '07/10/2023 08:00', '07/10/2023 09:00', '07/10/2023 10:00', '07/10/2023 11:00',
             '07/10/2023 13:00', '07/10/2023 14:00', '07/10/2023 15:00', '07/10/2023 16:00',
             '07/11/2023 08:00', '07/11/2023 09:00', '07/11/2023 10:00', '07/11/2023 11:00']
}

apt = False
clientDoc = ''
text = ''
conn = sqlite3.connect('appointments.db')
c = conn.cursor()
c.execute('''CREATE TABLE IF NOT EXISTS appointments
             (doctor TEXT, date TEXT, patient TEXT)''')

# Fetch existing appointments from the database
#c.execute("SELECT date FROM appointments WHERE doctor=?", (clientDoc,))
#existing_appointments = c.fetchall()
#existing_appointments = [row[0] for row in existing_appointments]

patientName= input('Enter your full name: ')

# Prompt user to select a doctor
for doctor in doctors:
    print(doctor)

clientDoc = select_doctor()

c.execute("SELECT date FROM appointments WHERE doctor=?", (clientDoc,))
existing_appointments = c.fetchall()
existing_appointments = [row[0] for row in existing_appointments]

available_appointments = [appt for appt in doctors[clientDoc] if appt not in existing_appointments]

# Print available days for the selected doctor
print(f"Please note that all times are in EST.")
print(f"Available dates for {clientDoc}:")
for day in available_appointments:
    print(day)


text = input('Enter a Date and Time: ')

available_appointments = [appt for appt in doctors[clientDoc] if appt not in existing_appointments]

while not apt:
    if text in available_appointments:
        # Add the appointment to the database
        c.execute("INSERT INTO appointments VALUES (?, ?, ?)", (clientDoc, text, patientName))
        conn.commit()
        apt = True  # Appointment set
    else:
        print('The doctor is not available for the date you specified.')
        print('Make sure you are properly formatting data and time: MM/DD/YYYY HH:MM')
        print('Please try again.')
        text = input('Enter a Date: ')


confirmation_selection =''
if apt:
    print('Appointment set succesfully!')
    while not confirmation_selection:
        confirmation_selection = input('Would you like to receive a confirmation email? Type 1 for Yes or 0 for No:  ')
        if confirmation_selection == '0':
            print('Thank you for using our service!')
        if confirmation_selection == '1':
            email_sender = 'seogroup15.doctorsappts@gmail.com'
            email_password = 'ocprspypzcffooik'
            email_receiver = input('Please provide valid email address:')
            subject = 'Doctors Appts Made Easy: Appointment Reminder'
            body = f"""
                We hope this email finds you well :)
                As a gentle reminder, you have an appointment coming up with {clientDoc} for {text}
                """
            em = EmailMessage()
            em['From'] = email_sender
            em['To'] = email_receiver
            em['Subject'] = subject
            em.set_content(body)

            context = ssl.create_default_context()
            with smtplib.SMTP_SSL('smtp.gmail.com', 465, context = context) as smtp:
                smtp.login(email_sender, email_password)
                smtp.sendmail(email_sender, email_receiver, em.as_string())
            print('Thank you for using our service!')

            conn.close()
